#########################################################################
####                            开发环境                              ####
#########################################################################
server:
  port: 10002
  servlet:
    context-path: /
  tomcat:
    uri-encoding: utf-8
  shutdown: graceful

spring:
  application:
    # Spring Boot Admin展示的客户端项目名，不设置，会使用自动生成的随机id
    name: boot
  boot:
    admin:
      client:
        # Spring Boot Admin 服务端地址
        instance:
          metadata:
            # 客户端端点信息的安全认证信息
            user.name: ${spring.security.user.name}
            user.password: ${spring.security.user.password}
          service-base-url: "http://localhost:8000/"
  security:
    user:
      name: geekerstar
      password: geekerstar
  # Sharding-JDBC的配置
  shardingsphere:
    datasource:
      # 数据源，这里配置两个，分别是ds1，ds2
      names: ds1,ds2
      # ds1的配置信息,product_db1
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.0.120:3306/product_db1?useUnicode=true&characterEncoding=utf-8
        username: root
        password: 666666
      # ds2的配置信息，shop_db
      ds2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.0.120:3306/product_db2?useUnicode=true&characterEncoding=utf-8
        username: root
        password: 666666
    # 分片的配置
    sharding:
      # 表的分片策略
      tables:
        product_base:
          # 数据节点配置，采用Groovy表达式,ds1.product_base;ds2.product_base
          actual-data-nodes: ds$->{1..2}.product_base
          ## 分库的策略
          database‐strategy:
            inline:
              ## 分片键
              sharding‐column: product_id
              ## 分片算法，product_id%2=(0,1)+1 ->(1,2)
              algorithm‐expression: ds$->{product_id%2+1}
          # 主键生成策略
          key-generator:
            # 主键
            column: product_id
            # 生成算法
            type: SNOWFLAKE
        product_description:
          # 数据节点配置，采用Groovy表达式
          actual-data-nodes: ds$->{1..2}.product_description
          database‐strategy:
            inline:
              sharding‐column: product_id
              algorithm‐expression: ds$->{product_id%2+1}
    props:
      sql:
        # 日志显示具体的SQL
        show: true

management:
  endpoint:
    health:
      # 端点健康情况，默认值"never"，设置为"always"可以显示硬盘使用情况和线程情况
      show-details: always
    shutdown:
      enabled: true
  endpoints:
    web:
      exposure:
        # 设置端点暴露的哪些内容，默认["health","info"]，设置"*"代表暴露所有可访问的端点
        include: "*"
      base-path: /actuator
    enabled-by-default: true
  metrics:
    tags:
      application: ${spring.application.name}

knife4j:
  enable: true
  basic:
    enable: false
    # Basic认证用户名
    username: geekerstar
    # Basic认证密码
    password: geekerstar
  openapi:
    title: Boot接口文档
    description: ""
    email: 247507792@qq.com
    concat: Geekerstar
    url:
    version: v1.0
    license: Apache 2.0
    license-url: https://stackoverflow.com/
    terms-of-service-url: https://stackoverflow.com/
    group:
      readwrite-splitting:
        group-name: 读写分离
        api-rule: package
        api-rule-resources:
          - com.geekerstar.sharding.module.split.controller
